{"version":3,"sources":["components/ToDoItem.js","components/ToDoList.js","components/sortTodos.js","components/Users.js","App.js","api.js","index.js"],"names":["ToDoItem","props","name","title","completed","handleCheckItem","react_default","a","createElement","Grid","Row","Column","width","textAlign","style","border","padding","Checkbox","checked","onClick","ToDoList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","open","handleClose","event","setState","obj","handleCheck","inherits","createClass","key","value","_this2","_this$props","todos","sortTodos","Dropdown","text","Menu","Item","prevState","TransitionablePortal","onClose","className","map","el","index","GridColumn","defineProperty","toUpperCase","slice","todoEl","ToDoItem_ToDoItem","user","React","Component","sortField","callback","titleup","b","localeCompare","titledown","nameup","toLowerCase","namedown","completedup","completeddown","toConsumableArray","sort","Users","users","_this$state","objectSpread","computer","mobile","isArray","userEl","indexEl","keys","city","App","load","buttonInnerText","disableButton","sortedList","array","copy","copyTodos","completedTask","find","JSON","stringify","Promise","all","fetch","then","resp","json","fullArr","id","userId","Users_Users","ToDoList_ToDoList","Button","color","inverted","loadInformation","disabled","size","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.127a9e8f.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Checkbox } from \"semantic-ui-react\";\n\nexport const ToDoItem = (props) => {\n    const { name, title, completed, handleCheckItem } = props;\n    return (\n        <Grid.Row >\n            <Grid.Column width={6} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>{name}</Grid.Column>\n            <Grid.Column width={6} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>{title}</Grid.Column>\n            <Grid.Column width={4} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>\n                <Checkbox checked={completed} onClick={handleCheckItem}/>\n            </Grid.Column>\n        </Grid.Row>\n    )\n}\n","import React from \"react\";\nimport { Grid, GridColumn } from \"semantic-ui-react\";\nimport { ToDoItem } from './ToDoItem';\nimport { Dropdown, TransitionablePortal } from 'semantic-ui-react';\n\n\n\nexport class ToDoList  extends React.Component {\n    state = {\n        name: true,\n        title: true,\n        completed: true,\n        open: false\n    }\n    handleClose = (event) => {\n        // event.stopPropagation();\n        this.setState({ open: false })\n    }\n    handleCheckItem = (obj) => {\n        this.props.handleCheck(obj)\n    }\n    render() {\n        const { todos, sortTodos } = this.props;\n        const { open } = this.state;\n        const staticHeader =  ['name', 'title', 'completed']; \n    return (\n        <div >\n        <Dropdown text='ToDoList' style={{border: '1px solid rgba(34,36,38,.15)', padding: '10px'}}>\n            <Dropdown.Menu >\n                <Dropdown.Item \n                    text=\"ToDoList\" \n                    onClick={(event) => {\n                        // event.stopPropagation(); \n                        this.setState(prevState => ({open: !prevState.open}))}\n                    } \n                />\n            </Dropdown.Menu>\n        </Dropdown>\n        <TransitionablePortal open={open}  onClose={this.handleClose}>\n            <div >\n                <Grid>\n                    <Grid.Row className='headerGrid'>\n                        {\n                            staticHeader.map((el, index) => (\n                            <GridColumn \n                                key={index}\n                                width={index > 1 ? 4 : 6}  // на момент написания кода в масиве всего 3 эл. => общая сума должна быть 16, колонки разбиты на 6,6,4\n                                textAlign=\"center\" \n                                onClick={() => {\n                                    sortTodos(todos, this.state[el] ? `${el}up` : `${el}down`);\n                                    this.setState((prevState) => ({[el]: !prevState[el]})); \n                                    }\n                                }\n                                className={`${el}Header`}\n                                title='Push Me'\n                            >\n                                {el[0].toUpperCase() + el.slice(1)} \n                            </GridColumn>\n                            ))\n                        }\n                    </Grid.Row>\n                </Grid>\n                <Grid>\n                {\n                    todos.map((todoEl, index) => (\n                        <ToDoItem \n                            key={index}\n                            name={todoEl.user.name}\n                            title={todoEl.title}\n                            completed={todoEl.completed}\n                            handleCheckItem={() => this.handleCheckItem(todoEl)}\n                        />\n                    ))\n                }\n                </Grid>\n            </div>\n        </TransitionablePortal>\n        </div>\n    )\n    }\n}\n","export const   sortTodos = (todos, sortField) => {\n    const callbackMap = {\n        titleup: (a,b) => a.title.localeCompare(b.title),\n        titledown: (a,b) => b.title.localeCompare(a.title),\n        nameup: (a,b) => a.user.name.toLowerCase().localeCompare(b.user.name.toLowerCase()),\n        namedown: (a,b) => b.user.name.toLowerCase().localeCompare(a.user.name.toLowerCase()),\n        completedup: (a,b) => a.completed - b.completed,\n        completeddown: (a,b) => b.completed - a.completed,\n    }\n    const callback = callbackMap[sortField];\n    const copyTodos = [ ...todos];\n    \n    return copyTodos.sort(callback);\n}","import React from 'react';\nimport { Dropdown, TransitionablePortal, Grid } from 'semantic-ui-react';\n\nexport class Users extends React.Component {\n    state = {\n        user: {},\n        open: false\n    }\n    handleClose = () => this.setState({ open: false })\n    render() {\n        const { users } = this.props; \n        const { user,open } = this.state;\n        const staticHeader = ['id', 'Name', 'Username', 'Email', 'City','Phone', 'Website', 'Company'];\n        return (\n            <div>\n            <Dropdown text='Users' style={{border: '1px solid rgba(34,36,38,.15)', padding: '10px'}}>\n                <Dropdown.Menu>\n                <Dropdown.Item text='All Users' onClick={() => this.setState({user: [ ...users ], open: true}) }/>\n                {\n                    users.map((el, index) => (\n                        <Dropdown.Item \n                            text={el.name} \n                            key={index}\n                            onClick={() => this.setState({user: { ...el }, open: true}) }\n                        />\n                    ))\n                }\n                </Dropdown.Menu>\n            </Dropdown>\n            <TransitionablePortal open={open} onClose={this.handleClose}>\n\n            <div>\n                <Grid>\n                    <Grid.Row>\n                    {\n                        staticHeader.map((el,index) => (\n                            <Grid.Column computer={2} mobile={4} key={index} style={{border: '1px solid grey', padding: '10px'}}>\n                                {el}\n                            </Grid.Column>\n                        ))\n                    }\n                    </Grid.Row>\n                </Grid>\n                <Grid>\n                    {   !Array.isArray(user) ?\n                        <Grid.Row>\n                         {\n                             Object.keys(user).map((el,index) => (\n                            <Grid.Column computer={2} mobile={4} key={index} style={{border: '1px solid grey', padding: '10px'}}>\n                            {\n                                el === 'address' ? user[el].city : \n                                el === 'company' ? user[el].name :\n                                user[el]\n                            } \n                            </Grid.Column>\n                            ))\n                        }\n                        </Grid.Row> :\n                        user.map((userEl,indexEl) => (\n                            <Grid.Row key={indexEl}>\n                            {\n                                Object.keys(userEl).map((el,index) => (\n                                <Grid.Column computer={2} mobile={4} key={index} style={{border: '1px solid grey', padding: '10px'}}>\n                                {\n                                    el === 'address' ? userEl[el].city : \n                                    el === 'company' ? userEl[el].name :\n                                    userEl[el]\n                                } \n                                </Grid.Column>\n                                ))\n                            }\n                            </Grid.Row>\n                        ))\n                    }\n                    \n                </Grid>\n            </div>\n            </TransitionablePortal>\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { getTodos, getUsers } from './api';\nimport { ToDoList } from './components/ToDoList';\nimport { Button } from 'semantic-ui-react';\nimport { sortTodos } from './components/sortTodos';\nimport { Users } from './components/Users';\nclass  App extends React.Component {\n  state = {\n    todos: [],\n    users: [],\n    load: false,\n    buttonInnerText: 'Load Data',\n    disableButton: false\n  }\n  sortedList = (array,sortField) => {\n    this.setState({ todos: sortTodos(array, sortField) })\n  }\n  async loadInformation() {\n    this.setState({\n      disableButton: true,\n      buttonInnerText: \"Loading...\",\n    });\n    const [ todos, users ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n    const fullArr = [ ...todos];\n    fullArr.map(el => el.user = users.find(user => user.id === el.userId));\n    this.setState({\n      todos: fullArr,\n      users,\n      load: true\n    });\n  }\n  handleCheck = (obj) => {\n    const copy = { ...obj };\n    const copyTodos  = [ ...this.state.todos ];\n    \n\n    let completedTask = copyTodos.find(el => JSON.stringify(el) === JSON.stringify(copy)).completed;\n     copyTodos.find(el => JSON.stringify(el) === JSON.stringify(copy)).completed = !completedTask;\n    \n    this.setState({todos: copyTodos})\n  }\n  render() {\n    const { todos,users } = this.state;\n    return (\n      <div className=\"App\">\n       {\n         this.state.load ?\n          <div className=\"parentUsersToDo\">\n            <Users users={users}/>           \n            <ToDoList\n              todos={todos}\n              sortTodos={this.sortedList}\n              handleCheck={this.handleCheck}\n            /> \n          </div> :\n          <Button \n            className=\"loadButton\"\n            color=\"green\"\n            inverted\n            onClick={() => this.loadInformation()}\n            disabled={this.state.disableButton}\n            size='big'\n          > \n            {this.state.buttonInnerText}\n          </Button> \n       }\n      </div>\n    );\n  }\n}\n\nexport default App;","export const getTodos = () => {\n    return fetch('https://jsonplaceholder.typicode.com/todos')\n            .then(resp => resp.json());\n}\nexport const getUsers = () => {\n    return fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}