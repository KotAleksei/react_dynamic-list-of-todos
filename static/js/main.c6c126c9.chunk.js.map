{"version":3,"sources":["ToDoItem.js","ToDoList.js","sortTodos.js","Users.js","App.js","api.js","index.js"],"names":["ToDoItem","props","name","title","completed","react_default","a","createElement","Grid","Row","Column","width","textAlign","style","border","padding","Checkbox","checked","ToDoList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","open","handleClose","event","setState","inherits","createClass","key","value","_this2","_this$props","todos","sortTodos","Dropdown","text","Menu","Item","onClick","prevState","TransitionablePortal","onClose","className","map","el","index","GridColumn","defineProperty","toUpperCase","slice","todoEl","ToDoItem_ToDoItem","user","React","Component","sortField","callback","titleup","b","localeCompare","titledown","nameup","toLowerCase","namedown","completedup","completeddown","toConsumableArray","sort","Users","users","_this$state","objectSpread","computer","mobile","keys","city","App","load","buttonInnerText","disableButton","sortedList","array","Promise","all","fetch","then","resp","json","fullArr","find","id","userId","Users_Users","ToDoList_ToDoList","Button","color","inverted","loadInformation","disabled","size","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"kUAGaA,EAAW,SAACC,GAAU,IACvBC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UACrB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,KACIJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGC,UAAU,SAASC,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,SAAUb,GAC/FG,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGC,UAAU,SAASC,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,SAAUZ,GAC/FE,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGC,UAAU,SAASC,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,SACjFV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAUC,QAASb,yBCHtBc,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,MAAQ,CACJlC,MAAM,EACNC,OAAO,EACPC,WAAW,EACXiC,MAAM,GALdhB,EAOIiB,YAAc,SAACC,GAEXlB,EAAKmB,SAAS,CAAEH,MAAM,KAT9BhB,EAAA,OAAAC,OAAAmB,EAAA,EAAAnB,CAAAJ,EAAAC,GAAAG,OAAAoB,EAAA,EAAApB,CAAAJ,EAAA,EAAAyB,IAAA,SAAAC,MAAA,WAWa,IAAAC,EAAArB,KAAAsB,EACwBtB,KAAKvB,MAA1B8C,EADHD,EACGC,MAAOC,EADVF,EACUE,UACPX,EAASb,KAAKY,MAAdC,KAEZ,OACIhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUC,KAAK,WAAWrC,MAAO,CAACC,OAAQ,+BAAgCC,QAAS,SAC/EV,EAAAC,EAAAC,cAAC0C,EAAA,EAASE,KAAV,KACI9C,EAAAC,EAAAC,cAAC0C,EAAA,EAASG,KAAV,CACIF,KAAK,WACLG,QAAS,SAACd,GAENM,EAAKL,SAAS,SAAAc,GAAS,MAAK,CAACjB,MAAOiB,EAAUjB,aAK9DhC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAsBlB,KAAMA,EAAOmB,QAAShC,KAAKc,aAC7CjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,CAAUgD,UAAU,cAjBV,CAAC,OAAQ,QAAS,aAmBPC,IAAI,SAACC,EAAIC,GAAL,OACjBvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACIlB,IAAKiB,EACLjD,MAAOiD,EAAQ,EAAI,EAAI,EACvBhD,UAAU,SACVyC,QAAS,WACLL,EAAUD,EAAOF,EAAKT,MAAMuB,GAAX,GAAAxB,OAAoBwB,EAApB,SAAAxB,OAAgCwB,EAAhC,SACjBd,EAAKL,SAAS,SAACc,GAAD,OAAAhC,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBqC,GAAML,EAAUK,OAGpDF,UAAS,GAAAtB,OAAKwB,EAAL,UACTxD,MAAM,WAELwD,EAAG,GAAGI,cAAgBJ,EAAGK,MAAM,QAMhD3D,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEIuC,EAAMW,IAAI,SAACO,EAAQL,GAAT,OACNvD,EAAAC,EAAAC,cAAC2D,EAAD,CACIvB,IAAKiB,EACL1D,KAAM+D,EAAOE,KAAKjE,KAClBC,MAAO8D,EAAO9D,MACdC,UAAW6D,EAAO7D,sBA3D9Cc,EAAA,CAA+BkD,IAAMC,oBCPtBrB,EAAY,SAACD,EAAOuB,GAC/B,IAQMC,EARc,CAChBC,QAAS,SAAClE,EAAEmE,GAAH,OAASnE,EAAEH,MAAMuE,cAAcD,EAAEtE,QAC1CwE,UAAW,SAACrE,EAAEmE,GAAH,OAASA,EAAEtE,MAAMuE,cAAcpE,EAAEH,QAC5CyE,OAAQ,SAACtE,EAAEmE,GAAH,OAASnE,EAAE6D,KAAKjE,KAAK2E,cAAcH,cAAcD,EAAEN,KAAKjE,KAAK2E,gBACrEC,SAAU,SAACxE,EAAEmE,GAAH,OAASA,EAAEN,KAAKjE,KAAK2E,cAAcH,cAAcpE,EAAE6D,KAAKjE,KAAK2E,gBACvEE,YAAa,SAACzE,EAAEmE,GAAH,OAASnE,EAAEF,UAAYqE,EAAErE,WACtC4E,cAAe,SAAC1E,EAAEmE,GAAH,OAASA,EAAErE,UAAYE,EAAEF,YAEfkE,GAG7B,OAFehD,OAAA2D,EAAA,EAAA3D,CAAQyB,GAENmC,KAAKX,aCTbY,EAAb,SAAAhE,GAAA,SAAAgE,IAAA,IAAA/D,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2D,GAAA,QAAA1D,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA6D,IAAAlD,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,MAAQ,CACJ+B,KAAM,GACN9B,MAAM,GAHdhB,EAKIiB,YAAc,kBAAMjB,EAAKmB,SAAS,CAAEH,MAAM,KAL9ChB,EAAA,OAAAC,OAAAmB,EAAA,EAAAnB,CAAA6D,EAAAhE,GAAAG,OAAAoB,EAAA,EAAApB,CAAA6D,EAAA,EAAAxC,IAAA,SAAAC,MAAA,WAMa,IAAAC,EAAArB,KACG4D,EAAU5D,KAAKvB,MAAfmF,MADHC,EAEiB7D,KAAKY,MAAnB+B,EAFHkB,EAEGlB,KAAK9B,EAFRgD,EAEQhD,KAEb,OACIhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUC,KAAK,QAAQrC,MAAO,CAACC,OAAQ,+BAAgCC,QAAS,SAC5EV,EAAAC,EAAAC,cAAC0C,EAAA,EAASE,KAAV,KAEIiC,EAAM1B,IAAI,SAACC,EAAIC,GAAL,OACNvD,EAAAC,EAAAC,cAAC0C,EAAA,EAASG,KAAV,CACIF,KAAMS,EAAGzD,KACTyC,IAAKiB,EACLP,QAAS,kBAAMR,EAAKL,SAAS,CAAC2B,KAAK7C,OAAAgE,EAAA,EAAAhE,CAAA,GAAMqC,GAAMtB,MAAM,WAMrEhC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAsBlB,KAAMA,EAAMmB,QAAShC,KAAKc,aAEhDjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,KApBS,CAAC,KAAM,OAAQ,WAAY,QAAS,OAAO,QAAS,UAAW,WAsBvDiD,IAAI,SAACC,EAAGC,GAAJ,OACbvD,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAa6E,SAAU,EAAGC,OAAQ,EAAG7C,IAAKiB,EAAO/C,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,SACvF4C,OAMjBtD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,KAEIa,OAAOmE,KAAKtB,GAAMT,IAAI,SAACC,EAAGC,GAAJ,OAClBvD,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAa6E,SAAU,EAAGC,OAAQ,EAAG7C,IAAKiB,EAAO/C,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,SAEjF,YAAP4C,EAAmBQ,EAAKR,GAAI+B,KACrB,YAAP/B,EAAmBQ,EAAKR,GAAIzD,KAC5BiE,EAAKR,eA/CrCwB,EAAA,CAA2Bf,IAAMC,WC6DlBsB,6MAxDbvD,MAAQ,CACNW,MAAO,GACPqC,MAAO,GACPQ,MAAM,EACNC,gBAAiB,YACjBC,eAAe,KAEjBC,WAAa,SAACC,EAAM1B,GAClBjD,EAAKmB,SAAS,CAAEO,MAAOC,EAAUgD,EAAO1B,oNAGxC9C,KAAKgB,SAAS,CACZsD,eAAe,EACfD,gBAAiB,wBAEYI,QAAQC,IAAI,CCtBpCC,MAAM,8CACJC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAGpBH,MAAM,8CACJC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,8CDiBnBvD,OAAOqC,QAITmB,cAAexD,IACbW,IAAI,SAAAC,GAAE,OAAIA,EAAGQ,KAAOiB,EAAMoB,KAAK,SAAArC,GAAI,OAAIA,EAAKsC,KAAO9C,EAAG+C,WAC9DlF,KAAKgB,SAAS,CACZO,MAAOwD,EACPnB,QACAQ,MAAM,wIAGD,IAAA/C,EAAArB,KAAA6D,EACiB7D,KAAKY,MAArBW,EADDsC,EACCtC,MAAMqC,EADPC,EACOD,MACd,OACE/E,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,OAEZjC,KAAKY,MAAMwD,KACVvF,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,mBACbpD,EAAAC,EAAAC,cAACoG,EAAD,CAAOvB,MAAOA,IACd/E,EAAAC,EAAAC,cAACqG,EAAD,CACE7D,MAAOA,EACPC,UAAWxB,KAAKuE,cAGpB1F,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CACEpD,UAAU,aACVqD,MAAM,QACNC,UAAQ,EACR1D,QAAS,kBAAMR,EAAKmE,mBACpBC,SAAUzF,KAAKY,MAAM0D,cACrBoB,KAAK,OAEJ1F,KAAKY,MAAMyD,yBAjDLzB,IAAMC,kBEDzB8C,IAASC,OAAO/G,EAAAC,EAAAC,cAAC8G,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c6c126c9.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Checkbox } from \"semantic-ui-react\";\n\nexport const ToDoItem = (props) => {\n    const { name, title, completed } = props;\n    return (\n        <Grid.Row >\n            <Grid.Column width={6} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>{name}</Grid.Column>\n            <Grid.Column width={6} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>{title}</Grid.Column>\n            <Grid.Column width={4} textAlign=\"center\" style={{border: '1px solid grey', padding: '10px'}}>\n                <Checkbox checked={completed} />\n            </Grid.Column>\n        </Grid.Row>\n    )\n}\n","import React from \"react\";\nimport { Grid, GridColumn } from \"semantic-ui-react\";\nimport { ToDoItem } from './ToDoItem';\nimport { Dropdown, TransitionablePortal } from 'semantic-ui-react';\n\n\n\nexport class ToDoList  extends React.Component {\n    state = {\n        name: true,\n        title: true,\n        completed: true,\n        open: false\n    }\n    handleClose = (event) => {\n        // event.stopPropagation();\n        this.setState({ open: false })\n    }\n    render() {\n        const { todos, sortTodos } = this.props;\n        const { open } = this.state;\n        const staticHeader =  ['name', 'title', 'completed']; \n    return (\n        <div >\n        <Dropdown text='ToDoList' style={{border: '1px solid rgba(34,36,38,.15)', padding: '10px'}}>\n            <Dropdown.Menu >\n                <Dropdown.Item \n                    text=\"ToDoList\" \n                    onClick={(event) => {\n                        // event.stopPropagation(); \n                        this.setState(prevState => ({open: !prevState.open}))}\n                    } \n                />\n            </Dropdown.Menu>\n        </Dropdown>\n        <TransitionablePortal open={open}  onClose={this.handleClose}>\n            <div >\n                <Grid>\n                    <Grid.Row className='headerGrid'>\n                        {\n                            staticHeader.map((el, index) => (\n                            <GridColumn \n                                key={index}\n                                width={index > 1 ? 4 : 6}  // на момент написания кода в масиве всего 3 эл. => общая сума должна быть 16, колонки разбиты на 6,6,4\n                                textAlign=\"center\" \n                                onClick={() => {\n                                    sortTodos(todos, this.state[el] ? `${el}up` : `${el}down`);\n                                    this.setState((prevState) => ({[el]: !prevState[el]})); \n                                    }\n                                }\n                                className={`${el}Header`}\n                                title='Push Me'\n                            >\n                                {el[0].toUpperCase() + el.slice(1)} \n                            </GridColumn>\n                            ))\n                        }\n                    </Grid.Row>\n                </Grid>\n                <Grid>\n                {\n                    todos.map((todoEl, index) => (\n                        <ToDoItem \n                            key={index}\n                            name={todoEl.user.name}\n                            title={todoEl.title}\n                            completed={todoEl.completed}\n                        />\n                    ))\n                }\n                </Grid>\n            </div>\n        </TransitionablePortal>\n        </div>\n    )\n    }\n}\n","export const   sortTodos = (todos, sortField) => {\n    const callbackMap = {\n        titleup: (a,b) => a.title.localeCompare(b.title),\n        titledown: (a,b) => b.title.localeCompare(a.title),\n        nameup: (a,b) => a.user.name.toLowerCase().localeCompare(b.user.name.toLowerCase()),\n        namedown: (a,b) => b.user.name.toLowerCase().localeCompare(a.user.name.toLowerCase()),\n        completedup: (a,b) => a.completed - b.completed,\n        completeddown: (a,b) => b.completed - a.completed,\n    }\n    const callback = callbackMap[sortField];\n    const copyTodos = [ ...todos];\n    \n    return copyTodos.sort(callback);\n}","import React from 'react';\nimport { Dropdown, TransitionablePortal, Grid } from 'semantic-ui-react';\n\nexport class Users extends React.Component {\n    state = {\n        user: {},\n        open: false\n    }\n    handleClose = () => this.setState({ open: false })\n    render() {\n        const { users } = this.props; \n        const { user,open } = this.state;\n        const staticHeader = ['id', 'Name', 'Username', 'Email', 'City','Phone', 'Website', 'Company'];\n        return (\n            <div>\n            <Dropdown text='Users' style={{border: '1px solid rgba(34,36,38,.15)', padding: '10px'}}>\n                <Dropdown.Menu>\n                {\n                    users.map((el, index) => (\n                        <Dropdown.Item \n                            text={el.name} \n                            key={index}\n                            onClick={() => this.setState({user: { ...el }, open: true}) }\n                        />\n                    ))\n                }\n                </Dropdown.Menu>\n            </Dropdown>\n            <TransitionablePortal open={open} onClose={this.handleClose}>\n\n            <div>\n                <Grid>\n                    <Grid.Row>\n                    {\n                        staticHeader.map((el,index) => (\n                            <Grid.Column computer={2} mobile={4} key={index} style={{border: '1px solid grey', padding: '10px'}}>\n                                {el}\n                            </Grid.Column>\n                        ))\n                    }\n                    </Grid.Row>\n                </Grid>\n                <Grid>\n                    <Grid.Row>\n                    {\n                        Object.keys(user).map((el,index) => (\n                            <Grid.Column computer={2} mobile={4} key={index} style={{border: '1px solid grey', padding: '10px'}}>\n                            {\n                                el === 'address' ? user[el].city : \n                                el === 'company' ? user[el].name :\n                                user[el]\n                            } \n                            </Grid.Column>\n                        ))\n                    }\n                    </Grid.Row>\n                </Grid>\n            </div>\n            </TransitionablePortal>\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { getTodos, getUsers } from './api';\nimport { ToDoList } from './ToDoList';\nimport { Button } from 'semantic-ui-react';\nimport { sortTodos } from './sortTodos';\nimport { Users } from './Users';\nclass  App extends React.Component {\n  state = {\n    todos: [],\n    users: [],\n    load: false,\n    buttonInnerText: 'Load Data',\n    disableButton: false\n  }\n  sortedList = (array,sortField) => {\n    this.setState({ todos: sortTodos(array, sortField) })\n  }\n  async loadInformation() {\n    this.setState({\n      disableButton: true,\n      buttonInnerText: \"Loading...\",\n    });\n    const [ todos, users ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n    const fullArr = [ ...todos];\n    fullArr.map(el => el.user = users.find(user => user.id === el.userId));\n    this.setState({\n      todos: fullArr,\n      users,\n      load: true\n    });\n  }\n  render() {\n    const { todos,users } = this.state;\n    return (\n      <div className=\"App\">\n       {\n         this.state.load ?\n          <div className=\"parentUsersToDo\">\n            <Users users={users}/>           \n            <ToDoList\n              todos={todos}\n              sortTodos={this.sortedList}\n            /> \n          </div> :\n          <Button \n            className=\"loadButton\"\n            color=\"green\"\n            inverted\n            onClick={() => this.loadInformation()}\n            disabled={this.state.disableButton}\n            size='big'\n          > \n            {this.state.buttonInnerText}\n          </Button> \n       }\n      </div>\n    );\n  }\n}\n\nexport default App;","export const getTodos = () => {\n    return fetch('https://jsonplaceholder.typicode.com/todos')\n            .then(resp => resp.json());\n}\nexport const getUsers = () => {\n    return fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}